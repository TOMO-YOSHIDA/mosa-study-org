// 記事テンプレート
extends ../template.jade

// 記事のタイトルをココに
block title
	title 変数のスコープ

// 記事本文
block contents
	h1 変数のスコープ
	section
		h1 変数スコープを知る

		div.
			Javascriptの変数スコープはちょっと特殊です。
		ul
			li スコープは関数内
			li ifやforなどの'{}'ブロックでスコープが切れない
		div.
			という特徴があります。
			処理をfunctionで囲んでいますが、これについては後で説明するので今はスルーして下さい。
		div コードは外側の関数ごとコピペしてください。

		script(title="変数のスコープは関数内",type="code/Javascript").
			(function(){
				var a = 1;

				// Javaだったらi, bはforブロック内のみ有効
				for(var i = 0; i < 10; i++) {
					var b = i;
					if(i===0) assert(a === 1, 'aが見える'); // *1
				}

				// でもJavascriptではforの後も残り続ける
				assert(typeof i === 'number', 'forブロック外でiが見える:' + i); // *2
				assert(typeof b === 'number', 'forブロック外でbが見える:' + i); // *3

				if(true) {
					var c = 'C'; // 実行される
				} else {
					var d = 'D'; // 実行されない
				}

				assert(c !== undefined, 'ifブロック外でcが見える:' + c); // *4
				assert(d === undefined, 'dは実行されていないので:' + d); // *5

				// 未知の変数Fの型をチェック
				assert(typeof F === 'function', 'Fが見える、Fって何？'); // *6
				F();
				// 未知の変数Fの型をチェック
				assert(typeof Z === 'function', 'Zが見える、Zって何？'); // *7
				Z();

				// Fはこれ。自身を囲うスコープ内ならどこでも参照できる
				function F(){
					var f = 'f in F';
					assert(typeof f === 'string', '関数F内でfは見える'); // *8
					assert(c !== undefined, '外側の変数cが見える:' + c); // *9
				};

				if(false) {
					function Z(){}; // 絶対に通らない関数でも見える？
				}

				assert(typeof f === 'undefined', '関数F外ではfは見えない'); // *10
				// assert(f === undefined, '変数を読み取ろうとすると実行時エラー');

				// 変数参照はできるが、初期化されていない(当たり前)
				assert(e === undefined, 'eはまだundefined'); // *11
				var e = 3;
			})();

		div このサンプルではたくさんの事実が読み取れます。
		ol
			li 前に宣言された変数は参照できる
			li for文の初期化で宣言された変数がブロック外で参照できる
			li for文の中で宣言された変数がブロック外で参照できる
			li ifの実行されたブロック内の変数が参照できる
			li ifの実行されていないほうのブロック内の変数も参照はできる。初期化はされていない
			li 関数は有効なスコープ内なら前方でも参照できる(whistling:巻き上げと呼ばれる)
			li 実行されないif文の中で宣言された関数も参照できる
			li 関数内で宣言された変数fは、当然関数内で参照できる
			li 関数外で宣言された変数cも参照できる
			li 変数スコープは関数内のみ有効なので、関数F内の変数fは外から参照できない
			li 変数は関数内なら参照できるが、実行されるまで代入はされない

		div.
			関数内で宣言されるvarやfunction宣言は、その関数内のどこからでもアクセスできます。
			関数functionについては前方で実行可能です。
		div.
			関数内の変数について、前方で参照してもエラーにはなりません。
			ただしどこにも宣言されていない変数(例えば関数F内のf)を読み取ろうとすると実行時エラーとなります。
		div typeofだと変数宣言がなくてもエラーにならない。不思議。

	section
		h1 varなし宣言はグローバル
		div.
			Javascriptでは、varをつけずに変数を宣言することができます。
			しかし、プロならvarなし宣言は禁止です。
		div.
			なぜなら、varなしの宣言はグローバル変数となり、どこからでも参照できてしまうからです。
			どこからでも参照できる、ということはどこからでも書き換えられてしまいます。
			そしてSPA(single page application)などでページがリロードされない場合、グローバルから辿れるオブジェクトはメモリに残り続けます。

		script(title="varなしの場合はグローバル変数になる",type="code/Javascript").

			function A(){
				a = "A"; //グローバル変数になる
			}

			function B(){
				assert(a ===  'A', 'グローバル変数aが見える！');
				a = "蝋人形"; // お前を蝋人形にしてやろうか
			}

			function C(){
				// ここではグローバル変数のaを参照すると思いきや・・・？
				assert(a === undefined, '後ろに宣言されているローカルのaを参照する');

				// ローカル変数を宣言する
				var a = 'a on c';
				assert(a, 'var 付きなので関数内変数');

				// 修飾子なしでaを変更しても、グローバル変数ではない
				a = 'local a';
				assert(window.a === '蝋人形', '明示的にグローバル変数を参照');
			}

			// 関数を順番に実行
			A(); // グローバル変数を作成
			B(); // グローバル変数にアクセス・変更
			C(); // 関数内に同じ名前で変数を定義

			// 書き換えられた変数を外側で確認
			assert(a === "蝋人形", 'B関数の中でaが書き換えられた');

		div.
			ちなみにコンソールでいくら<code>var</code>をつけても、関数で囲わないとグローバル変数になります。
			この例だとA,B,Cはグローバル関数になります。

	section
		h1 まとめ
		ul.important
			li 変数、関数はそれを囲う関数内で参照できる
			li '{}'でスコープは切られない
			li var宣言無しではグローバル変数となる!

// ライター情報
block writer
	include ../persons/TomoYoshida