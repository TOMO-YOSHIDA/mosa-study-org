// 記事テンプレート
extends ../template.jade

// 記事のタイトルをココに
block title
	title 変数のスコープ

// 記事本文
block contents
	h1 変数のスコープ

	section
		h1 変数スコープを知る

		div


		script(title="変数のスコープは関数内",type="code/Javascript").

			var a = "A"; // 関数の外
			function fncB(){
				var b = "B";
				console.log(a); // aが見える
				console.log(b); // bが見える
			};

			fnc(); // 関数を実行するとaが見える

			console.log(a); // aが見える
			console.log(b); // bが見えない(Uncaught ReferenceError: b is not defined(…))

		div.
			この結果を見ると、変数は関数の内側でのみ参照できることがわかります。
			また、fncB関数の内側では外側の変数aも参照できます。

	section
		h1 varなし宣言はグローバル
		div.
			Javascriptでは、varをつけずに変数を宣言することができます。
			しかし、プロならvarなし宣言は禁止です。
		div なぜなら、varなしの宣言はグローバル変数となり、どこからでも参照できてしまうからです。
		div どこからでも参照できる、ということはどこからでも書き換えられてしまいます。

		script(title="varなしの場合はグローバル変数になる",type="code/Javascript").

			function A(){
				a = "A"; //グローバル変数になる
			}

			function B(){
				// B関数内では宣言していないけどグローバル変数aが見える！
				console.log(a); // -> A
				a = "not A";
			}

			function C(){
				// ここではグローバル変数のaを参照する
				console.log('c: "%s"', a); // -> c: "undefined"

				// ローカル変数を宣言する
				var a = 'a on c';
				console.log('c: local a = "%s"', a); // -> c: local a = "a on c"

				// 修飾子なしでaを変更しても、グローバル変数ではない
				a = 'local a';
				console.log('c: window.a = "%s"', window.a); // -> c: window.a = "not A"
			}

			A();
			B();
			C();

			// Aで宣言した変数がグローバルのため、B関数の中でaが書き換えられている
			console.log('a = "%s"', a); // -> a = "not A"

		div.
			いくら<code>var</code>をつけたとしても、関数外ではグローバル変数になります。
			



	section
		h1 まとめ
		ul
			li var宣言無しではグローバル変数となる
			li var宣言のスコープは関数の内側
			li 原則、varなしの変数宣言は禁止

// ライター情報
block writer
	include ../persons/TomoYoshida