// 記事テンプレート
extends ../../template.jade

// 記事のタイトルをココに
block title
	title prototype

// 記事本文
block contents
	h1 prototype
	section
		div.
			prototypeは、関数の「設計図」です。
			prototypeとして宣言したメソッドやプロパティは、全ての関数インスタンスから参照されます。
		div.
			またビルトイン関数のporototypeを拡張することができるので、もともとあるStringやNumberに便利なメソッドを追加することも可能です。
		div.
			さらにはJavaクラスのように、prototypeも継承することができるのでJavascriptの可能性を拡げてくれます。
			ちょっとむずかしいですが、これを覚えればなかなかのJS使いになれます。
		div.
			プロトタイプには以下の特徴があります。
		ul
			li 共通のメソッドを定義できる
			li クラスのように継承できる

	section
		h1 プロトタイプを拡張してみる
		div.
			早速ですが、ビルトイン関数のStringに対してprototype拡張をしてみます。
		div.
			Javascriptには<code>String.trim()</code>という、文字列の前後の空白を取り除いてくれる便利メソッドがあります。
			でも要件によって全角スペースもとって欲しいなぁとか、右側(文末)の空白だけとって欲しいなぁとかがよくあります。

		div.
			その場合、よく思いつくのが<code>StringUtil</code>の様なユーティリティクラスを作成することです。

		script(title="よくあるStringUtil",type="code/Javascript").
			// 半角スペースは\u0020、全角スペースは\u3000
			var StringUtil = {
				// 両端の全角スペースも削除する関数
				strim : function(str) {
					return str && str.replace(/^[\u0020\u3000]+|[\u0020\u3000]+$/g,"")
				},

				// 右側のスペースを削除する関数
				rtrim : function(str){
					return str && str.replace(/[\u0020\u3000]+$/g,"")
				}
			}

			var str = " 　 左右の端が半/全角スペース混じり 　 ";

			console.log('"%s"', StringUtil.strim(str)); // -> "左右の端が半/全角スペース混じり"
			console.log('"%s"', StringUtil.rtrim(str)); // -> " 　 左右の端が半/全角スペース混じり"

		div とりあえず、シンプルです。他にも機能を足していきたい場合はStringUtilをメンテしていきます。

		div では、いよいよprototypeによるビルトイン関数の機能拡張です。
		script(title="String.prototypeの拡張",type="code/Javascript").
			// 両端の全角スペースも削除する関数
			String.prototype.strim = function() {
				return this.replace(/^[\u0020\u3000]+|[\u0020\u3000]+$/g,"")
			};

			// 右側のスペースを削除する関数
			String.prototype.rtrim = function(){
				return this.replace(/[\u0020\u3000]+$/g,"")
			};

			var str = " 　 左右の端が半/全角スペース混じり 　 ";

			console.log('"%s"', str.strim(str)); // -> "左右の端が半/全角スペース混じり"
			console.log('"%s"', str.rtrim(str)); // -> " 　 左右の端が半/全角スペース混じり"

			console.log('"%s"'," 　直接呼び出し! 　".strim()); // -> "直接呼び出し!"

		div.
			どうでしょう。
			書き方は大して変わりませんが、<code>String.strim</code>と<code>String.rtrim</code>というメソッドが増えました。
		div.
			一度prototypeを拡張すると、同じ関数のインスタンスは全てそれを参照できます。
			インスタンスごとに作成されるわけではないのでメモリにも優しいエコロジカルなやつです。
		div.
			prototypeの場合、メソッドとして呼び出されるので実行コンテキストのthisは常にそのオブジェクト自身です。
			ですが、変数がString型である想定なのにNumber型やnullなど、String型以外だった場合はエラーになります。
			テストで型違いに気づくことができますが、nullやundefinedの場合の動作を記述できるStringUtilの方が使いやすいかもしれないですね。



	section
		h1 prototype
		div.
			まずは簡単な例を。
			コンストラクタとして関数を定義したあと、共通のメソッドやプロパティは関数の持つprototypeオブジェクトにくっつけていきます。

		script(title="簡単なprototypeサンプル",type="code/Javascript").
			// 名前を保持するだけの関数
			function Animal(name){
				this.name = name
			};

			// 猫インスタンスを作成
			var cat = new Animal('cat');
			assert(cat.say === undefined, '猫はまだ話せない')

			// prototypeにsayを追加(インスタンスに追加ではない)
			Animal.prototype.say = function(){return "I'm " + this.name};

			// 犬インスタンスを作成。話せる！
			var dog = new Animal('dog');
			assert(dog.say(), '犬は話せる');

			// さっきまで話せなかった猫は？
			assert(cat.say(), '猫も話せるようになった');

		div.
			これのなにが嬉しいの？って別に猫が話せるようになったのが嬉しい訳ではありません。
			prototypeはインスタンスごとに作成されるわけではないのでメモリを消費しません。エコです。
			prototypeに関数やプロパティを追加すると、それを使うインスタンス全てから参照できます。
		div.
			prototypeにくっつける関数やプロパティは後付も可能というところがすごいところ(C#でも後からstaticメソッドを追加とか、似たようなことができます)。

		div.
			下記は悪い例です。
			prototypeを使わずコンストラクタで関数を作って返しちゃうと、インスタンスごとに関数を持ってしまいます。

		script(title="やっちゃいけない例",type="code/Javascript").
			// コンストラクタで全てを定義する
			function Animal(name) {
				this.name = name;
				this.say = function(){
					return "I'm " + this.name;
				};
			}

			// 話せるけどインスタンスごとにメソッドを作成してしまう
			var cat = new Animal('cat');

			assert(cat.say(), 'とりあえずは話せる');

	section
		h1 prorotype拡張
		div.
			prototypeを拡張すると、ビルトインの関数にも機能を追加することできます。
		div.
			例えば、String.trimは文字の両端のスペースを削除しますが、文字の右端のスペースと全角を削除する'rtrim'メソッドを追加してみます。

		script(title="Stringを拡張する",type="code/Javascript").
			String.prototype.rtrim = function(){
				return this.replace(/(\s|　)*$/, '');
			}

			var s1 = 'テスト　　　'; // 右端に全角スペースがある
			var s2 = 'テスト	 　'; // 右端にtab文字、半角スペース、全角スペースがある
			var s3 = '  テスト  '; // 左端の半角スペース2個が削除されないことを確認する

			assert(s1.rtrim() === 'テスト', '右端のスペースが削除された');
			assert(s2.rtrim() === 'テスト', '右端のスペースが削除された');
			assert(s3.rtrim() === '  テスト',
								 '左端のスペースは残り、右端のスペースが削除された');

		div.
			prototype拡張を使うと、IE8以前のブラウザでString.trimを使えるようにしたり、Arrays.filterを使えるようにしたりできます。
			プロっぽい。

	section
		h1 prorotype上書き
		div.
			String.trimも、それ自体を上書きできます。
			全角スペースもtrimできるようにしてみましょう。

		script(title="String.trimを上書きする",type="code/Javascript").
			String.prototype.trim = function(){
				return this.replace(/^(\s|　)*|(\s|　)*$/g, '');
			}
			assert('　　　あ　　　'.trim() === 'あ', '上書き成功!');

		div.
			強力ですがページ内の全てのString.trimに影響があるのでよく見極めてください。
			上書きせずに、別名で拡張するのがいいかもしれません。


// ライター情報
block writer
	include ../../persons/TomoYoshida