// 記事テンプレート
extends ../../template.jade

// 記事のタイトルをココに
block title
	title this

// 記事本文
block contents
	h1 this

	section
		div.
			Javascriptをやっていて、まずつまずくのがthis。
			thisは実行コンテキストを指し、呼び出しパターンによってthisが何を指すのかが変わります。

		div.
			関数呼び出しのパターンは４つあり、それぞれで動作が異なります。

	section
		h1 メソッド呼び出しパターン
		div.
			オブジェクトを作成し、そのメソッドとして呼び出すパターン。予想通り、thisはオブジェクトになります。

		script(title="メソッド呼び出しパターン",type="code/Javascript").
			var obj = {
				name: 'sample object',
				method: function(){
					assert(this.name === 'sample object', 'thisはobjを指す');
				}
			}
			obj.method();

	section
		h1 関数呼び出しパターン
		div.
			関数を定義し、関数として呼び出すパターンです。

		script(title="関数呼び出しパターン",type="code/Javascript").
			function MyFunction() {
				assert(this === window, 'thisはグローバルオブジェクトのwindow');
			}
			MyFunction();

		div.
			'this'がwindow、つまりグローバルオブジェクトを指していることがわかりました。
			つまり、この関数の中で<code>this.value = 'value'</code>なんて書いたらグローバル変数として定義されてしまいます。

	section
		h1 コンストラクタ呼び出しパターン
		div 関数をインタンス化するためにnew付きで実行された場合、thisは関数自身になります。
		script(title="コンストラクタ呼び出し",type="code/Javascript").
			function MyFunction(value){
				this.value = value;
				this.get = function(){
					return this.value;
				};
			}

			var f = new MyFunction('this is MyFunction');
			console.log(f.get()); // -> "this is MyFunction"

		div.
			newを付けて呼び出す場合、thisは意図どおり関数本体を参照します。問題ありません。

		div.
			しかしnewをつけずにただの関数として呼び出すと、関数呼び出しパターンで解説したとおりthisはグローバルオブジェクトになります。

		script(title="newをつけずに呼び出すと？",type="code/Javascript").
			function MyFunction(value){
				this.value = value;
				this.get = function(){
					return this.value;
				};
			}

			f = MyFunction('関数呼び出し');

			// fはどこにいった？
			assert(typeof f === 'undefined', 'fはundefined');

			// MyFunctionを関数として呼び出すとthisはグローバルオブジェクトになる。
			assert(get() == '関数呼び出し', 'getがグローバルアクセスできる');
			assert(value == '関数呼び出し', 'valueもグローバル宣言されてしまった');

		div.
			コンストラクタとして用意した関数内でthis.constructorを調べることで、メソッド呼び出しなのかコンストラクタ呼び出しなのかをチェックすることができます。

		script(title="newをつけない場合にError",type="code/Javascript").
			function MyFunction() {
				if(this.constructor.name !== 'MyFunction')
					throw new Error('new なし！');
			}

			var f1 = new MyFunction(); // -> 問題なし
			var f2 = MyFunction(); // -> Uncaught Error: new なし！

		div.
			コンストラクタとして呼び出されなかった場合にErrorをthrowすることで、使い方が間違っていることを開発中に検知できます。
		div.
			関数がコンストラクタとして呼び出される前提か、関数呼び出しなのか？は関数のネーミングルールで判定します。
		ul
			li 大文字始まりならコンストラクタ
			li 小文字始まりなら関数、またはメソッド
		div.
			とするのが一般的なようです。
			(ただし公式ルールではないので、小文字始まりのコンストラクタや大文字始まりのメソッドも作成可能です。)


	section
		h1 apply,call呼び出しパターン
		div
			| 最後は特殊な呼び出しパターンです。この
			+pagelink('apply, call', 'apply-and-call')
			| の呼び出しパターンについては次章で解説します。

// ライター情報
block writer
	include ../../persons/TomoYoshida