// 記事テンプレート
extends ../../template.jade

// 記事のタイトルをココに
block title
	title apply, call

// 記事本文
block contents
	h1 apply, call

	section
		div.

	section
		h1 apply, call呼び出しパターン
		div Javascriptの良いところであり悪いところでもあるのが、thisを自由に指定することができることです。

		div.
			関数はそれ自身に<code>apply</code>と<code>call</code>というメソッドを持っています。
			このメソッドを使うと、実行時のthisにあたるオブジェクトを引数に渡すことができます。
			この実行時の"this"にあたるオブジェクトを「実行コンテキスト」と呼びます。
			実行コンテキストがnull,またはundefinedの場合はglobalオブジェクトを実行コンテキストとして実行します。
	section
		h1 どんなときに使うか？
		div.
			ajaxなど、非同期実行後のコールバック関数の実行コンテキストを固定するために使います。
			通常、コールバックパターンでは関数呼び出しになってしまうので実行コンテキストがグローバルになってしまいます。

		script(title="コールバックの例",type="code/Javascript").

			function Callback() {
				this.name = 'callback';

				// thisがCallbackを参照していれば'callback'が表示されるはず
				this.callback = function(){
					console.log(this.name || this.constructor.name);
				}
			}

			var c = new Callback();

			setTimeout(c.callback, 1000); // -> Window

		div.
			上記の例では、Callback関数のインスタンス<code>c</code>を参照したいのに、グローバルオブジェクトになってしまいました。
		div.
			コールバック関数が正しく<code>c</code>を参照できるように、applyかcallを使います。

	section
		h1 ロード済み関数
		div.
			動作確認用に、下記の関数がこのページでロード済みです。

		script(title="thisを調べる関数",type="code/Javascript").
			function showThis(arg1, arg2) {
				// thisが何者なのかを表示
				var msg = "this is '" + (this === window ? 'Window' : this.name);
				// 引数を表示する
				msg += "': " + arg1 + ", " + arg2;
				console.log(msg);
			}

			// 実行時コンテキストダミー
			var dummy = {
				name: 'DUMMY',
			};
		div.
			実行時コンテキストである"this"をチェックし、グローバルオブジェクトかそれ以外かを表示します。

		div.
			showThis関数を関数として呼び出すと、前章で解説したとおりグローバルオブジェクトになります。
		script(title="thisを調べる関数",type="code/Javascript").
			showThis("引数1", "引数2");
			// -> this is 'Window': 引数1, 引数2

	section
		h1 apply
		div.
			applyは、関数に実行コンテキストを与え、引数をまとめて渡すことができます。
			引数そのままで関数をラップする場合などに使います。

		script(title="applyの例",type="code/Javascript").
			// 引数は配列にまとめて渡す
			showThis.apply(dummy, ["引数1", "引数2"]);

			// 実行コンテキストをdummyにして実行するラッパー関数
			function wrapper(arg1, arg2) {
				showThis.apply(dummy, arguments);
			}

			// ラップ関数を使い、引数をそのままつかう
			wrapper("引数A", "引数B");

			// コンテキストを渡さずに実行
			showThis.apply(null, ["引数α", "引数β"]);

		div.
			ラッパー関数<code>wrapper</code>に渡された引数を、そのまま<code>showThis</code>関数に渡しています。
		div.
			applyに実行コンテキストとしてdummyを渡しています。このdummyがnull, またはundefinedの場合、実行コンテキストはグローバルオブジェクトになります。

	section
		h1 call
		div.
			callも、applyと本質的には同様です。
			異なるのは関数への引数を塊ではなく、通常の関数のように列挙するだけです。


		script(title="callの例",type="code/Javascript").
			// 引数は列挙して渡す
			showThis.call(dummy, "引数1", "引数2");

			// 実行コンテキストをdummyにして実行するラッパー関数
			function wrapper(arg1, arg2) {
				showThis.call(dummy, arg1, arg2);
			}

			// ラップ関数を使い、引数をそのままつかう
			wrapper("引数A", "引数B");

			// コンテキストを渡さずに実行
			showThis.call(null, "引数α", "引数β");

		div.
			applyのケースと同様の結果が得られました。

	section
		h1 applyとcall、どちらを使う？
		div.
			このように関数はapply, callというメソッドを持っています。
			第一引数にコンテキストを渡すことで、実行コンテキストを動的に決定できます。

		div.
			apply, callのどっちを使うかという問題については「状況によって使いやすい方」を選ぶべきです。
		div.
			引数がすでに配列としてまとまっている場合はapply、列挙するならcall。
			callを使わずに配列にしてapplyで統一するというのもアリだと思います。

	section
		h1 実行時コンテキストを固定する
		div.
			ここで、最初のコールバック関数を実行する際に、正しく<code>c</code>を参照するようにapplyで書きなおしてみましょう。

		script(title="コールバックの例",type="code/Javascript").

			function Callback() {
				this.name = 'callback';

				// thisがCallbackを参照していれば'callback'が表示されるはず
				this.callback = function(){
					console.log(this.name || this.constructor.name);
				}
			}

			var c = new Callback();

			var applyFunction = function(){
				c.callback.apply(c);
			};

			setTimeout(applyFunction, 1000); // -> callback

		div.
			ただしく'callback'が出力されました。

	section
		h1 この書き方面倒じゃない？
		div.
			いちいちfunctionで囲って実行コンテキストを指定するのも面倒です。
		div.
			そのため、underscore.jsやjQueryなどでは実行時コンテキストをバインドするための関数が用意されています。
			また、ES6からは関数自身に<code>bind</code>というメソッドが用意されます。

		script(title="underscore.jsによる関数バインドの例",type="code/Javascript").

			// function Callbackの宣言は略
			var c = new Callback();

			// _.bindはコンテキストが固定された関数を返す
			var applyFunction = _.bind(c.callback, c);

			setTimeout(applyFunction, 1000); // -> callback

		div.
			functionを自分で囲うより、記述が短くなって、意図もわかりやすくなりました。

	section
		h1 まとめ
		div.
			コールバック関数ではthisの参照が変わってしまうことを覚えてください。
		div.
			Javaなど、クラス志向言語では'this'が必ず自身のインスタンスを参照するので混乱しませんが、Javascriptでは呼ばれ方次第で実行コンテキストが変わってしまうので注意が必要です。

		ul
			li applyは引数をまとめて渡す
			li callは引数を列挙する
			li コールバック関数でthisを使う場合には実行コンテキストに気をつける

		div 実行コンテキストは、実際にコードを組む上でとても重要な概念です。

	script.
			function showThis(arg1, arg2) {
				// thisが何者なのかを表示
				var msg = "this is '" + (this.name || this.constructor && this.constructor.name);
				// 引数を表示する
				msg += "': " + arg1 + ", " + arg2;
				console.log(msg);
			}

			// 実行時コンテキストと
			var dummy = {
				name: 'DUMMY',
			};

			var _ = {
				bind: function(f,c) {
					return function(){
						f.apply(c, arguments);
					}
				}
			}

// ライター情報
block writer
	include ../../persons/TomoYoshida