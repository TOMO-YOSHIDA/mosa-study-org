// 記事テンプレート
extends ../../template.jade

// 記事のタイトルをココに
block title
	title function:関数

// 記事本文
block contents
	h1 function:関数
	div.

	section
		h1 Javascriptにおけるfunction
		div.
			Javascriptにおける関数には以下の様な特徴があります。

		ul
			li 変数、配列の要素、オブジェクトのプロパティとして代入できる
			li 関数は引数として関数を受け取れる
			li 関数は戻り値として関数を返せる
			li 関数にもプロパティを持てる

	section
		h1 関数の宣言
		script(title="関数の宣言",type="code/Javascript").
			// 名前付き関数
			function funcA(){};

			// 無名関数
			function(){};

			// 無名関数を変数に入れる
			var funcB = function(){};

		div 下記の構文で関数を宣言できます。
		ul
			li function宣言(必須)
			li 関数の名前(任意)
			li カッコつきの引数リスト(引数は0個以上、つまりなくても良い)
			li ブレスで囲った関数本体(囲ってあれば空でも可)

	section
		h1 コールバック関数の例
		div.
			Javascriptでは、配列のソートにArrays.sortがビルトインで用意されています。
			ただ、この関数のソート順は「文字列比較」なので、数値順に並べたいという希望がかないません。

		script(title="標準ソート関数は文字列順",type="code/Javascript").
			var arr = [9, 7, 93, 20, 64, 90, 30, 45, 10, 78];
			arr.sort(); // -> [10, 20, 30, 45, 64, 7, 78, 9, 90, 93]

		div.
			そこで自前の比較用関数をArrays.sortに渡します。

		script(title="ソート用関数をコールバックに渡す",type="code/Javascript").
			var arr = [9, 7, 93, 20, 64, 90, 30, 45, 10, 78];
			// aとbに数字が渡る前提で、差を返す。
			var compare = function(a,b){
				return a - b;
			};

			// sortのコールバック関数として渡すと期待通りの結果が得られる
			arr.sort(compare); // -> [7, 9, 10, 20, 30, 45, 64, 78, 90, 93]
		ul
			li 関数を変数compareとして宣言
			li compare関数をArray.sort関数の引数として渡す
		div の２つの特徴を確認できました。
		div.
			コールバックとして渡す場合、関数に"()"をつけないことに注意してください。
			"()"をつけると、関数が即実行されます。
			非同期実行させるためにコールバックを渡しているつもりで、実行結果を渡しているオマヌケコードは実務でも散見されます。

	section
		h1 無名関数
		div.
			関数には名前をつけることができますが、必須ではありません。
			使い捨てなら定義だけで使えます。

		script(title="ソート用関数を無名関数として渡す",type="code/Javascript").
			var arr = [9, 7, 93, 20, 64, 90, 30, 45, 10, 78];

			//使い捨てなら名前をつけるまでもない
			arr.sort(function(a,b){return a - b});

			// 結果 -> [7, 9, 10, 20, 30, 45, 64, 78, 90, 93]
		div プロっぽい。

	section
		h1 関数の即実行
		div.
			関数を作り、即実行して捨てる。
			変数を関数内で完結させられるのでグローバル変数を汚染しません。
			動作検証の場合もこの形式にすることで、変数を残さないので再検証時に悪さしません。

		script(title="関数の即実行",type="code/Javascript").
			// 関数をカッコで囲う
			(function(){console.log('1:OK!');})();

			// 実行引数まで囲ってもOK
			(function(){console.log('2:OK!');}());

			// 関数をカッコで囲わないと構文エラー
			function(){console.log('3:NG!');}();
			// -> Uncaught SyntaxError: Unexpected token ((…)

		div この形式では関数全体を"()"で囲う必要がありますが、ショートハンドもあります。

		script(title="関数の即実行のショートハンド",type="code/Javascript").
			!function(){console.log('OK!');}();

		div.
			"!"をつけることで、関数の返り値をboolean反転します。
			他に"+"や"-"なども使えます。

	section
		h1 引数の自由さがMAX
		div.
			Javascriptは関数を呼び出すとき、引数の数や型はまったく考慮しません。
		script(title="関数の引数",type="code/Javascript").
			// 引数を表示するだけの関数
			var a = function(a,b){
				console.log('a = "%s", b = "%s"', a, b);
			}

			a(); // -> a = "undefined", b = "undefined"
			a('A'); // -> a = "A", b = "undefined"
			a('A', 'B', 'C'); // -> a = "A", b = "B"
		div.
			渡されなければundefined、定義済み引数より多く渡されても気にしません。
			undefinedだったらデフォルト値を入れるなどの対応が可能です。

	section
		h1 暗黙のオブジェクトarguments
		div なんならまったく引数を関数側に宣言しなくても取得することができます。
		script(title="関数の引数を適当に取得する",type="code/Javascript").
			// 引数定義がなくてもargumentsから取得可能
			var a = function(){
				console.log('引数の数: %d, a = "%s",b = "%s"',
					arguments.length,
					arguments[0],
					arguments[1]);
			}
			a(); // -> a = "undefined", b = "undefined"
			a('A'); // -> a = "A", b = "undefined"
			a('A', 'B', 'C'); // -> a = "A", b = "B"
			// 引数の数: 0, a = "undefined",b = "undefined"
			// 引数の数: 1, a = "A",b = "undefined"
			// 引数の数: 3, a = "A",b = "B"
		div.
			関数にはすべての引数が<code>arguments</code>という暗黙のオブジェクトとして渡されます。
			これを使えば引数が何個来ても対応できます。

// ライター情報
block writer
	include ../../persons/TomoYoshida