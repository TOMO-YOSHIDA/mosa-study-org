// 記事テンプレート
extends ../template

// 記事のタイトルをココに
block title
	title script読み込みのパフォーマンス

// 記事本文
block contents
	h1 script読み込みのパフォーマンス
	section
		div.
			あまり気にしていない開発者も多いようですが、script読み込みは初期表示に大きな影響を与えます。
		div.
			スクリプトをモジュール化してファイルをわけ、それをHTMLのscriptタグでそれぞれ読み込む場合が想定されます。

	section
		h1 scriptは直列実行である

		div.
			HTMLに書かれた外部リソースは、(ブラウザが対応していれば)画像などの場合は並列に読み込むことができます。
			scriptも並列読み込みできても良さそうですが、前後の依存関係があるために並列実行はされません。
		div.
			例えば、下記の例ではscript-1.js〜script-5.jsまでがロードされます。<br>(※codehighlihgt.jsがうまくscriptタグ表示できないのでコメントアウトしています)

		script(title="scriptタグの読み込み", type="code/HTML").
			<!--
			<script src="./script-1.js></script>
			<script src="./script-2.js></script>
			<script src="./script-3.js></script>
			<script src="./script-4.js></script>
			<script src="./script-5.js></script>
			-->

		div.
			並列実行できないので、1つのスクリプトがロードされたら、実行完了するまで次のスクリプトはロードされません。
			ファイル同士で特に依存関係がなくても、ブラウザはそれを判断できないので直列実行になります。

	section
		h1 なにが遅いのか？
		div.
			scriptタグにsrcで外部ファイルが指定された場合、下記の手順で実行されます。
		ol
			li srcに指定された外部ファイルをサーバに問い合わせる
			li ファイルがあればロード開始
			li ファイルがなければエラー
			li ロードされたスクリプトを実行する

		div.
			このうち、ボトルネックとなりやすいのは1と2です。

		div ではなにが起きているのか？
		ol
			li サーバとの接続確立のオーバーヘッドがかかります。
			li ファイルサイズが大きいとそれだけロードに時間がかかります

		div.
			ローカルでテストしている時には気づきにくいですが、本番環境にのせてネットワークをまたぐと大きく響いてきます。
			特にモバイル環境など、貧弱な回線を使っている時は相当待たされます。
			CPUが貧弱なモバイル端末の場合は4のスクリプト実行も影響が大きくなります。

		div.
			最近ではHTMLの先頭でjQueryなどの外部ライブラリを大量にロードしているページが多いです。
			プラグインまで含めると、10リソースを超えることも珍しくありません。
			そのたびに接続・ダウンロードが発生すると遅くなって当たり前ですね。
		div.
			chromeの開発者ツールには通信速度・レイテンシのシミュレート機能があります。
			開発者ツールのnetworkタブに"No throttling"と表示されている項目をクリックすると通信速度をシミュレートできます。

	section
		h1 対応策
		div.
			対応策は単純です。
		ol
			li スクリプトファイルを１つにまとめる
			li スクリプトをminifyする
			li ファイルを圧縮して送信する

		h2 スクリプトファイルを１つにまとめる
		div.
			単純にロードするファイルを順番にくっつけていくだけです。
			これによって接続コストは１ファイルだけになります。
			このページで使用されている<code>codehighlight.js</code>は記事編集時点で6ファイルから構成されていますが、lib.min.jsという1ファイルに収められています。
			これによって接続コストが1/6になっています。

		h2 スクリプトをminifyする
		div.
			スクリプトの中にはたくさんの変数宣言があり、バイトに直すとそこそこ大きくなります。
			minifyとは、例えば"username"と宣言された変数名を"u"に置き換えてファイルサイズ削減を図ります。
			またコメントや改行文字も削除します。
			codehighlight.jsの場合、圧縮前は22KBですが、連結・圧縮後は6KBになりました。
		div.
			これによって人間が読むことがほぼ不可能になりますが、ファイルサイズは劇的に小さくなります。
			minifyは、gulp-uglifyなどの圧縮ツールを使用します。

		div.
			開発中はコードを読めないと困るので、リリース時のみ使うケースがあると思います。
			しかし、コードの書き方が原因でminify時に動作しなくなる場合もあるので、定期的にminifyして確認すると良いでしょう。

		div.
			CDNなどを使用して外部からロードする場合も、たいていはmin.jsが用意されていると思うので生JSは使わずにminifyされたファイルを使うとエコです。


		+exlink('gulp-uglify', 'https://github.com/terinjokes/gulp-uglify')

		h2 ファイルを圧縮して送信する
		div.
			HTTPサーバやアプリケーションサーバが用意する圧縮機能や圧縮済みファイルを送信する機能を使います。
			もちろんブラウザ側も圧縮通信をサポートしている必要があります。
			スクリプトはテキストファイルなので、けっこうな圧縮率を期待できます。
			6KBのcodehighlight.jsは、2.6KBまで縮められました。


	section
		h1 まとめ
		div チューニングポイントは３つ。
		ol
			li スクリプトファイルは可能な限り１つにまとめる
			li スクリプトはminifyする(min.jsを使う)
			li 圧縮して送信する
		div.
			scriptタグのコストについては個々の開発者ではなく、アーキテクトの気配りで劇的に改善できます。
			覚えておきましょう。


// ライター情報
block writer
	include ../persons/TomoYoshida